{"version":3,"sources":["components/SearchPanel.js","components/FavouriteMovie.js","components/Movie.js","components/Movies.js","utils/fetchMovies.js","components/App.js","reportWebVitals.js","index.js"],"names":["SearchPanel","props","input","useRef","className","onSubmit","e","preventDefault","attr","currentTarget","reduce","acc","cur","name","value","handleSearch","search","current","focus","type","ref","autoComplete","placeholder","onClick","FavouriteMovie","title","Movie","onClickFav","toggleFav","id","alt","description","Movies","movies","otherProps","Array","isArray","length","filter","el","liked","map","MOVIES","a","Promise","resolve","reject","setTimeout","App","useState","isLoading","setIsLoading","setMovies","searchText","setSearchText","useEffect","fetchMovies","then","data","catch","error","filteredMovies","toLowerCase","includes","text","newMovies","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.145273ba.chunk.js","sourcesContent":["import { useRef } from \"react\";\r\n\r\nexport default function SearchPanel(props) {\r\n  const input = useRef(null);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const attr = [...e.currentTarget].reduce((acc, cur) => {\r\n      const { name, value } = cur;\r\n      return { ...acc, [name]: value };\r\n    }, {});\r\n    props.handleSearch(attr.search);\r\n    input.current.focus();\r\n  };\r\n\r\n  const onClear = () => {\r\n    props.handleSearch(\"\");\r\n    input.current.value = \"\";\r\n    input.current.focus();\r\n  };\r\n\r\n  return (\r\n    <form className=\"search-wrapper\" onSubmit={onSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"search\"\r\n        ref={input}\r\n        autoComplete=\"off\"\r\n        className=\"search-field\"\r\n        placeholder=\"Search for a movie ...\"\r\n      />\r\n      <input\r\n        type=\"button\"\r\n        className=\"clear-btn\"\r\n        onClick={onClear}\r\n        name=\"clearbtn\"\r\n        value=\"X\"\r\n      />\r\n      <input\r\n        type=\"submit\"\r\n        className=\"search-btn\"\r\n        name=\"searchBtn\"\r\n        value=\"Search\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\n","export default function FavouriteMovie(props) {\r\n  return <div className=\"favourite-movie\">{props.title}</div>;\r\n}\r\n","export default function Movie(props) {\r\n  const onClickFav = () => {\r\n    props.toggleFav(props.id);\r\n  };\r\n  return (\r\n    <div className=\"movie-wrapper\">\r\n      <div className=\"movie-img-wrapper\">\r\n        <img alt=\"\" className=\"movie-img\" />\r\n      </div>\r\n      <div className=\"movie-description\">\r\n        <h1 className=\"movie-title\">{props.title}</h1>\r\n        <span className=\"heart-fav\" onClick={onClickFav}>\r\n          <i className=\"fas fa-heart\"></i>\r\n        </span>\r\n        <span className=\"heart-unfav\" onClick={onClickFav}>\r\n          <i className=\"far fa-heart\"></i>\r\n        </span>\r\n        <p className=\"movie-paragraph\">{props.description}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import FavouriteMovie from \"./FavouriteMovie\";\r\nimport Movie from \"./Movie\";\r\n\r\nexport default function Movies(props) {\r\n  const { movies, ...otherProps } = props;\r\n  if (!Array.isArray(movies) || movies.length === 0) {\r\n    return <p className=\"error\">List movies is empty!</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"movies-wrapper\">\r\n      <div className=\"favourite-movies\">\r\n        {movies\r\n          .filter((el) => el.liked === true)\r\n          .map((el) => {\r\n            return <FavouriteMovie key={el.id} title={el.title} />;\r\n          })}\r\n      </div>\r\n\r\n      {movies.map((el) => {\r\n        return <Movie key={el.id} {...el} {...otherProps} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","const MOVIES = [\r\n  {\r\n    id: 1,\r\n    liked: true,\r\n    title: \"Joker\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur luctus sollicitudin nisi, nec cursus nisl mollis ut. Donec magna velit, venenatis nec tellus non, egestas hendrerit quam. \",\r\n  },\r\n  {\r\n    id: 2,\r\n    liked: false,\r\n    title: \"Tenet\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur luctus sollicitudin nisi, nec cursus nisl mollis ut. Donec magna velit, venenatis nec tellus non, egestas hendrerit quam. \",\r\n  },\r\n  {\r\n    id: 3,\r\n    liked: false,\r\n    title: \"IronMan\",\r\n    description:\r\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur luctus sollicitudin nisi, nec cursus nisl mollis ut. Donec magna velit, venenatis nec tellus non, egestas hendrerit quam. \",\r\n  },\r\n];\r\n\r\nexport async function fetchMovies() {\r\n  return await new Promise((resolve, reject) => {\r\n    setTimeout(() => resolve(MOVIES), 3000);\r\n  });\r\n}\r\n","import \"./App.css\";\nimport SearchPanel from \"./SearchPanel\";\nimport Movies from \"./Movies\";\nimport { useEffect, useState } from \"react\";\nimport { fetchMovies } from \"../utils/fetchMovies\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchMovies()\n      .then((data) => {\n        setMovies(data);\n        setIsLoading(false);\n      })\n      .catch((error) => {});\n  }, []);\n\n  const handleSearch = (text) => {\n    setSearchText(text);\n  };\n\n  const toggleFav = (id) => {\n    const newMovies = movies.map((el) => {\n      if (el.id === +id) {\n        return { ...el, liked: !el.liked };\n      }\n\n      return el;\n    });\n    setMovies(newMovies);\n  };\n\n  if (isLoading) {\n    return <div className=\"spinner\">Loading ...</div>;\n  }\n\n  const filteredMovies = searchText\n    ? movies.filter((el) => {\n        return el.title.toLowerCase().includes(searchText.toLowerCase());\n      })\n    : movies;\n\n  return (\n    <div className=\"App\">\n      <SearchPanel handleSearch={handleSearch} />\n      <Movies movies={filteredMovies} toggleFav={toggleFav} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}